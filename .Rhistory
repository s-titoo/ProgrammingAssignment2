t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
View(cls_list)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
View(cls_list)
View(flag_colors)
View(flags)
shape_mat<-sapply(flag_shapes, range)
shapte_mat
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-unique(flags)
unique_vals<-apply(flags, unique)
unique_vals<-lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
0
exit()
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plant)
head(plant)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
sample(c(0,1), 100, prob=c(0.3,0.7))
sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips<-sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(100, size = 1, prob = 0.7)
flips2<-rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5,10)
my_pois<-replicate(100, rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot()
?plot
plot(x = cars$speed, y = cars$dist).
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed )
plot(x = cars$dist, y = cars$speed,xlab="Speed" )
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, title="My Plot")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col=2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install_course("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,
r_arch:country)
select(cran,
country:a_arch)
select(cran,
country:r_arch)
cran
select(cran, -time
)
-5:20
-(5:20)
select(-(x:size))
select(-(X:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version >= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country ==
"IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_vesrion), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correction_size=size+1000)
mutate(cran3, correct_size=size+1000)
summarize(cran,
avg_bytes = mean(size))
0
library(swirl)
library(switl)
library(swirl)
source()
search()
install.packages("KernSmooth")
library(KernSmooth)
set.seed(1)
rpois(5,2)
?dpois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(y)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", data.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "data.csv")
read.csv("data.csv")
x<-read.csv("data.csv")
str(x)
dim(x[x$VAL=="$1000000+"])
dim(x[x$VAL==24])
x$VAL
x[x$VAL==24]
class(x$VAL)
dim(x[x$VAL==24],)
dim(x[x$VAL==24,])
x[x$VAL==24,x$VAL]
x[x$VAL==24,1]
x[x$VAL==24 & !is.na(x$VAL)]
x[x$VAL==24 & !is.na(x$VAL),1]
dim(x[x$VAL==24 & !is.na(x$VAL),1])
length(x[x$VAL==24 & !is.na(x$VAL),1])
?wd
?working directory
?"working directory"
?directory
getwd()
install.packages("xlsx")
library(xlsx)
library(xlsx)
library(xlsxjars)
install.packages(rjava)
install.packages("rjava")
install.packages("rJava")
library(xlsx)
library(rJava)
library(xlsx)
library(xlsx)
read.xlsx("gas.xlsx")
read.xlsx("gas.xlsx",1)
x<-read.xlsx("gas.xlsx",1)
y<-x[18:23,7:15]
sum(y$Zip*y$Ext,na.rm=T)
?read.xlsx
x<-read.xlsx("gas.xlsx",1, rowIndex = 18:23, colIndex = 7:15)
sum(x$Zip*x$Ext,na.rm=T)
install.packages("XML")
require(XML)
x<-xmlTreeParse(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml, useInternal=TRUE)
x<-xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=TRUE)
x<-xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml)
)
x<-xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
x<-xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
x<-xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
rootNode <- xmlRoot(x)
xmlName(rootNode)
names(rootNode)
x<-xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternalNodes = true)
x<-xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternalNodes = TRUE)
rootNode <- xmlRoot(x)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL)
doc <- xmlParse(xData)
install.packages("RCurl")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL)
doc <- xmlParse(xData)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL)
doc <- xmlParse(xData)
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- xmlParse(xData)
?fread
??fread
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "data_1.csv")
x<-read.csv("data_1.csv")
DT<-x
install.packages("data.table")
library(data.table)
sys.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
sys.time(mean(DT[DT$SEX==1,]$pwgtp15), mean(DT[DT$SEX==2,]$pwgtp15))
Sys.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
Sys.time(mean(DT[DT$SEX==1,]$pwgtp15), mean(DT[DT$SEX==2,]$pwgtp15))
Sys.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
?system.time
Sys.time(mean(DT[DT$SEX==1,]$pwgtp15), mean(DT[DT$SEX==2,]$pwgtp15))
Sys.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
x_1<-Sys.time(mean(DT[DT$SEX==1,]$pwgtp15)) + Sys.time(mean(DT[DT$SEX==2,]$pwgtp15))
x_1<-Sys.time(mean(DT[DT$SEX==1,]$pwgtp15)) + Sys.time(mean(DT[DT$SEX==2,]$pwgtp15))
x_1<-Sys.time(mean(DT[DT$SEX==1,]$pwgtp15))
DT<-fread(DT)
DT<-fread("data_1.csv")
class(DT)
rm(DT)
DT<-fread("data_1.csv")
class(DT)
x_1<-Sys.time(mean(DT[DT$SEX==1,]$pwgtp15)) + Sys.time(mean(DT[DT$SEX==2,]$pwgtp15))
mean(DT[DT$SEX==1,]$pwgtp15)
Sys.time(mean(DT[DT$SEX==1,]$pwgtp15))
x2<-Sys.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
Sys.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
Sys.time(sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)) + system.time(mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)) + system.time(mean(DT[DT$SEX==2,]$pwgtp15))
x1<-system.time(mean(DT[DT$SEX==1,]$pwgtp15)) + system.time(mean(DT[DT$SEX==2,]$pwgtp15))
x2<-system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
x3<-system.time(mean(DT$pwgtp15,by=DT$SEX))
x4<-system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
x4<-system.time(rowMeans(DT)[DT$SEX==1]) + system.time(rowMeans(DT)[DT$SEX==2]))
x4<-system.time(rowMeans(DT)[DT$SEX==1]) + system.time(rowMeans(DT)[DT$SEX==2])
rowMeans(DT)[DT$SEX==1]
x5<system.time(DT[,mean(pwgtp15),by=SEX])
x5<-system.time(DT[,mean(pwgtp15),by=SEX])
x6<-system.time(tapply(DT$pwgtp15,DT$SEX,mean))
rowMeans(DT)[DT$SEX==2]
rowMeans(DT)[DT$SEX==1]
View(DT)
library(swirl)
swirl()
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:a_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, decs(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
set.seed(100)
rexp(40, 0.2)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
mns = NULL
for (i in 1 : 1000) mns <- c(mns, mean(runif(40)))
swirl()
library(swirl)
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(cran, by_package, mean(size))
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(by_package, count>679)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum, unique?465)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number("class5")
?mutate
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed<-mutate(passed, status="passed")
passed<-mutate(failed, status="failed")
failed<-mutate(failed, status="failed")
bind_rows(passed, failed)
sat
?select
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day<-today()
this_day
day(this_say)
day(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment<-now()
this_moment
second(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours=7, minutes=10)
this_moment
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart, hours=17, minutes=34)
depart
nyc+hours(15)+minutes(50)
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-(arrive, "Asia/Hong_Kong")
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<-parse_date("June 17, 2008", tz="Singapore")
?parse_date
mdy("June 17, 2008", tz="Singapore")
last_time<-mdy("June 17, 2008", tz="Singapore")
last_time
?interval
how_long<-interval(arrive, last_time)
how_long<-interval(last_time, arrive)
how_long
as.period(how_long)
stopwatch()
?pbimon
?pbinom
wd
pwd
cwd
getwd()
setwd("D:\Coursera\Data Science Specialization\2. R Programming\Programming Assingment 2\ProgrammingAssignment2")
setwd("D:/Coursera/Data Science Specialization/2. R Programming/Programming Assingment 2/ProgrammingAssignment2")
source(cachematrix.r)
source("cachematrix.r")
